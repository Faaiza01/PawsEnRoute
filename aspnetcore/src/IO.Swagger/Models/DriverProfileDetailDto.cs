/*
 * ProfileController
 *
 * Handles profile detail.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DriverProfileDetailDto : IEquatable<DriverProfileDetailDto>
    { 
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]
        [DataMember(Name="Email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [Required]
        [DataMember(Name="PhoneNumber")]
        public decimal? PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [Required]
        [DataMember(Name="Address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [Required]
        [DataMember(Name="Availability")]
        public string Availability { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [Required]
        [DataMember(Name="Experience")]
        public string Experience { get; set; }

        /// <summary>
        /// Picture of License
        /// </summary>
        /// <value>Picture of License</value>
        [Required]
        [DataMember(Name="DriverLicense")]
        public List<> DriverLicense { get; set; }

        /// <summary>
        /// Picture of Registation
        /// </summary>
        /// <value>Picture of Registation</value>
        [Required]
        [DataMember(Name="VehicleRegistration")]
        public List<> VehicleRegistration { get; set; }

        /// <summary>
        /// Picture of Insurance
        /// </summary>
        /// <value>Picture of Insurance</value>
        [Required]
        [DataMember(Name="InsuranceDocument")]
        public List<> InsuranceDocument { get; set; }

        /// <summary>
        /// Gets or Sets 
        /// </summary>
        [Required]
        [DataMember(Name="")]
        public string  { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DriverProfileDetailDto {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  DriverLicense: ").Append(DriverLicense).Append("\n");
            sb.Append("  VehicleRegistration: ").Append(VehicleRegistration).Append("\n");
            sb.Append("  InsuranceDocument: ").Append(InsuranceDocument).Append("\n");
            sb.Append("  : ").Append().Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DriverProfileDetailDto)obj);
        }

        /// <summary>
        /// Returns true if DriverProfileDetailDto instances are equal
        /// </summary>
        /// <param name="other">Instance of DriverProfileDetailDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DriverProfileDetailDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Availability == other.Availability ||
                    Availability != null &&
                    Availability.Equals(other.Availability)
                ) && 
                (
                    Experience == other.Experience ||
                    Experience != null &&
                    Experience.Equals(other.Experience)
                ) && 
                (
                    DriverLicense == other.DriverLicense ||
                    DriverLicense != null &&
                    DriverLicense.SequenceEqual(other.DriverLicense)
                ) && 
                (
                    VehicleRegistration == other.VehicleRegistration ||
                    VehicleRegistration != null &&
                    VehicleRegistration.SequenceEqual(other.VehicleRegistration)
                ) && 
                (
                    InsuranceDocument == other.InsuranceDocument ||
                    InsuranceDocument != null &&
                    InsuranceDocument.SequenceEqual(other.InsuranceDocument)
                ) && 
                (
                     == other. ||
                     != null &&
                    .Equals(other.)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Availability != null)
                    hashCode = hashCode * 59 + Availability.GetHashCode();
                    if (Experience != null)
                    hashCode = hashCode * 59 + Experience.GetHashCode();
                    if (DriverLicense != null)
                    hashCode = hashCode * 59 + DriverLicense.GetHashCode();
                    if (VehicleRegistration != null)
                    hashCode = hashCode * 59 + VehicleRegistration.GetHashCode();
                    if (InsuranceDocument != null)
                    hashCode = hashCode * 59 + InsuranceDocument.GetHashCode();
                    if ( != null)
                    hashCode = hashCode * 59 + .GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DriverProfileDetailDto left, DriverProfileDetailDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DriverProfileDetailDto left, DriverProfileDetailDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
