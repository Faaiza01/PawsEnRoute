/*
 * ProfileController
 *
 * Handles profile detail.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Driver Profle Complete
    /// </summary>
    [DataContract]
    public partial class CompleteDriverProfileDto : IEquatable<CompleteDriverProfileDto>
    { 
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [DataMember(Name="MobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [DataMember(Name="HomePhone")]
        public string HomePhone { get; set; }

        /// <summary>
        /// Gets or Sets WorkPhone
        /// </summary>
        [DataMember(Name="WorkPhone")]
        public string WorkPhone { get; set; }

        /// <summary>
        /// Gets or Sets PreferredPhone
        /// </summary>
        [DataMember(Name="PreferredPhone")]
        public string PreferredPhone { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="Age")]
        public string Age { get; set; }

        /// <summary>
        /// Profile Image of User
        /// </summary>
        /// <value>Profile Image of User</value>
        [DataMember(Name="ProfilePicture")]
        public List<> ProfilePicture { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [DataMember(Name="Experience")]
        public string Experience { get; set; }

        /// <summary>
        /// Gets or Sets AvailabilityDays
        /// </summary>
        [DataMember(Name="AvailabilityDays")]
        public List<> AvailabilityDays { get; set; }

        /// <summary>
        /// License Picture
        /// </summary>
        /// <value>License Picture</value>
        [DataMember(Name="DriverLicense")]
        public List<> DriverLicense { get; set; }

        /// <summary>
        /// Picture of Vehicle Registeration
        /// </summary>
        /// <value>Picture of Vehicle Registeration</value>
        [DataMember(Name="VehicleRegisteration")]
        public List<> VehicleRegisteration { get; set; }

        /// <summary>
        /// Picture of Insuance document.
        /// </summary>
        /// <value>Picture of Insuance document.</value>
        [DataMember(Name="InsuranceDocument")]
        public List<> InsuranceDocument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompleteDriverProfileDto {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("  PreferredPhone: ").Append(PreferredPhone).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  ProfilePicture: ").Append(ProfilePicture).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  AvailabilityDays: ").Append(AvailabilityDays).Append("\n");
            sb.Append("  DriverLicense: ").Append(DriverLicense).Append("\n");
            sb.Append("  VehicleRegisteration: ").Append(VehicleRegisteration).Append("\n");
            sb.Append("  InsuranceDocument: ").Append(InsuranceDocument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CompleteDriverProfileDto)obj);
        }

        /// <summary>
        /// Returns true if CompleteDriverProfileDto instances are equal
        /// </summary>
        /// <param name="other">Instance of CompleteDriverProfileDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompleteDriverProfileDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    MobilePhone == other.MobilePhone ||
                    MobilePhone != null &&
                    MobilePhone.Equals(other.MobilePhone)
                ) && 
                (
                    HomePhone == other.HomePhone ||
                    HomePhone != null &&
                    HomePhone.Equals(other.HomePhone)
                ) && 
                (
                    WorkPhone == other.WorkPhone ||
                    WorkPhone != null &&
                    WorkPhone.Equals(other.WorkPhone)
                ) && 
                (
                    PreferredPhone == other.PreferredPhone ||
                    PreferredPhone != null &&
                    PreferredPhone.Equals(other.PreferredPhone)
                ) && 
                (
                    Age == other.Age ||
                    Age != null &&
                    Age.Equals(other.Age)
                ) && 
                (
                    ProfilePicture == other.ProfilePicture ||
                    ProfilePicture != null &&
                    ProfilePicture.SequenceEqual(other.ProfilePicture)
                ) && 
                (
                    Experience == other.Experience ||
                    Experience != null &&
                    Experience.Equals(other.Experience)
                ) && 
                (
                    AvailabilityDays == other.AvailabilityDays ||
                    AvailabilityDays != null &&
                    AvailabilityDays.SequenceEqual(other.AvailabilityDays)
                ) && 
                (
                    DriverLicense == other.DriverLicense ||
                    DriverLicense != null &&
                    DriverLicense.SequenceEqual(other.DriverLicense)
                ) && 
                (
                    VehicleRegisteration == other.VehicleRegisteration ||
                    VehicleRegisteration != null &&
                    VehicleRegisteration.SequenceEqual(other.VehicleRegisteration)
                ) && 
                (
                    InsuranceDocument == other.InsuranceDocument ||
                    InsuranceDocument != null &&
                    InsuranceDocument.SequenceEqual(other.InsuranceDocument)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (MobilePhone != null)
                    hashCode = hashCode * 59 + MobilePhone.GetHashCode();
                    if (HomePhone != null)
                    hashCode = hashCode * 59 + HomePhone.GetHashCode();
                    if (WorkPhone != null)
                    hashCode = hashCode * 59 + WorkPhone.GetHashCode();
                    if (PreferredPhone != null)
                    hashCode = hashCode * 59 + PreferredPhone.GetHashCode();
                    if (Age != null)
                    hashCode = hashCode * 59 + Age.GetHashCode();
                    if (ProfilePicture != null)
                    hashCode = hashCode * 59 + ProfilePicture.GetHashCode();
                    if (Experience != null)
                    hashCode = hashCode * 59 + Experience.GetHashCode();
                    if (AvailabilityDays != null)
                    hashCode = hashCode * 59 + AvailabilityDays.GetHashCode();
                    if (DriverLicense != null)
                    hashCode = hashCode * 59 + DriverLicense.GetHashCode();
                    if (VehicleRegisteration != null)
                    hashCode = hashCode * 59 + VehicleRegisteration.GetHashCode();
                    if (InsuranceDocument != null)
                    hashCode = hashCode * 59 + InsuranceDocument.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CompleteDriverProfileDto left, CompleteDriverProfileDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CompleteDriverProfileDto left, CompleteDriverProfileDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
